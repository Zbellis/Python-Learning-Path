{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5a4c7b0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline \n",
    "import pandas\n",
    "from pandas import DataFrame\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "df = pandas.read_excel('run_report_3.xlsx')\n",
    "df = df.drop(columns=['Unnamed: 2'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f607f3d6",
   "metadata": {},
   "source": [
    "# Statistical Summary of Racing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "31399dcd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>pace</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>10.049167</td>\n",
       "      <td>7.137500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.523352</td>\n",
       "      <td>1.374608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.110000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.110000</td>\n",
       "      <td>6.282500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.860000</td>\n",
       "      <td>6.775000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>13.100000</td>\n",
       "      <td>8.222500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>26.300000</td>\n",
       "      <td>9.430000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        distance       pace\n",
       "count  12.000000  12.000000\n",
       "mean   10.049167   7.137500\n",
       "std     8.523352   1.374608\n",
       "min     1.000000   5.110000\n",
       "25%     3.110000   6.282500\n",
       "50%     7.860000   6.775000\n",
       "75%    13.100000   8.222500\n",
       "max    26.300000   9.430000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7214df1f",
   "metadata": {},
   "source": [
    "### Total Number of Races: 12\n",
    "### Average Distance of Races: 10 miles\n",
    "### Average Pace of races: 7 mins 13 seconds per mile"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50044724",
   "metadata": {},
   "source": [
    "# Plotting all data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "23c45cba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = DataFrame(df, columns=['distance'])\n",
    "y = DataFrame(df, columns=['pace'])\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.scatter(X, y, alpha=1)\n",
    "plt.title('Average Minutes Per Mile')\n",
    "plt.xlabel('Distance (mi)')\n",
    "plt.ylabel('Time (mins)')\n",
    "plt.ylim(5, 10)\n",
    "plt.xlim(0, 30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57e28113",
   "metadata": {},
   "source": [
    "# Machine Learning on Racing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "77b8c3fe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "regression = LinearRegression()\n",
    "regression.fit(X, y)\n",
    "regression.coef_ # theta_1\n",
    "regression.intercept_\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.title('Average Minutes Per Mile')\n",
    "plt.xlabel('Distance (mi)')\n",
    "plt.ylabel('Time (mins')\n",
    "plt.ylim(5, 10)\n",
    "plt.xlim(0, 30)\n",
    "plt.scatter(X, y)\n",
    "# Adding the regression line here:\n",
    "plt.plot(X, regression.predict(X), color='red', linewidth=3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e3e03808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7461118274152458"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.score(X, y)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
